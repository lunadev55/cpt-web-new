//= require cable
//= require_self
//= require_tree .
//= require action_cable

this.App = {};

App.cable = ActionCable.createConsumer();  





App.orders = App.cable.subscriptions.create("OrdersChannel", {
  connected: function() {
    console.log("conected into websocket")
    $('.online-offline').html(" Online")
    $('.online-offline').css('color','green')
  },

  disconnected: function() {
    $('.online-offline').html(" Offline")
    $('.online-offline').css('color','red')
    // Called when the subscription has been terminated by the server
  },

  received: function(data) {
        // caso alguma ordem seja executada, atualizar tabelas
        if (((data.status == "executada") || (data.status == "open")) && ($(".current_place").prop("place") == "business")){
          $.get('/exchange/open_orders');
        };
        if (((data.status == "executada") || (data.status == "open")) && ($(".current_place").prop("place") == "overview")){
          elemento = $(  ".pair-control" )
          if (elemento.find(":selected").text() == "Selecione o par"){
              return
          } else {
              a = elemento.find(":selected").text().replace(/ /,'')
              b = a.replace(/ /,'')
              $('.actual_price_form').data("pair",b)
              if ($('#type').prop("value") == "buy"){
                tipo = "buy"
              } else {
                tipo = "sell"
              };
              
              $.ajax({
              url: "instant_buy_price/" + b + '/' + tipo,
              cache: false,
              type: "GET",
              success: function(response) {
                  $(".actual_price_form").val(response);
                  calc(response)
              },
              error: function(xhr) {
                  
              }});
            }}
            
        if ((data.status == "executada") && ($(".current_place").prop("place") == "overview")){
          <% EXCHANGE_PARES.each do |par| %>
                        <% atual = par.tr(" ", "") %>
                        <% obj = atual.tr("/","_") %>
                            $('.<%= obj %>_buy').html(data.last_price["<%= atual %>_buy"])
                            $('.<%= obj %>_sell').html(data.last_price["<%= atual %>_sell"])
          <% end %>
          pair = $( ".pair-control" )
          pair_string = pair.find(":selected").text().replace(' ','');
          pair_string.replace('/','_');
        };
    // Called when there's incoming data on the websocket for this channel
  }
});



function calc(price){
            a = elemento.find(":selected").text().replace(/ /,'')
            b = a.replace(/ /,'')
            if (price == "Não disponível."){
              $('.instant_submit').prop("disabled",true)
            }else {
              $('.instant_submit').prop("disabled",false)
            }
            element = $(".amount_input")
            element.val((element.val()).replace(/^\./, ""));
            element.val((element.val()).replace(',','.'));
            element.val((element.val()).replace(/[^0-9\,.]/g,''));
            quantity = parseFloat($( ".amount_input" ).val().replace(",","."));
            price = parseFloat($(".actual_price_form").val().replace(",",".").split(" ")[0]);
            pair = b.split("/");
            currency1 = pair[0];
            currency2 = pair[1];
            
            if ($('#type').prop("value") == "buy"){
              discount = (quantity * 0.005).toFixed(8);
              receive = (quantity - discount).toFixed(8);
              total = (price * quantity).toFixed(8);
              
              $(".receber_instant").html(receive + " " + currency1);
              $(".total_instant").html(total + " " + currency2);
            }else{
              total = (price * quantity).toFixed(8);
              discount = (total * 0.005).toFixed(8);
              receive = (total - discount).toFixed(8);
              
              $(".receber_instant").html(receive + " " + currency2);
              $(".total_instant").html(total + " " + currency2);
            }

}